var search_data = {"index":{"searchIndex":["classandobjecttester","complex","contexttester","filesourcetester","helpertester","numeric","object","rational","string","stringsourcetester","symentrytester","symhierarchytester","symmaptester","xfoorth","context","filesource","readpoint","stringsource","symentry","symhierarchy","symmap","virtualmachine","xvirtualmachine","xfoorthclass","xfoorthobject","<<()","[]()","[]=()","_create_initial_classes()","_create_initial_classes()","abort()","add_entry()","add_entry()","add_exclusive_method()","add_shared_method()","all_classes()","cache_exclusive_method()","cache_shared_method()","class_class()","close()","create_foorth_instance()","create_foorth_instance()","create_foorth_subclass()","ctrl_peek()","ctrl_pop()","ctrl_push()","depth()","do_nest()","embed()","embed()","embed()","embed()","embed()","eof?()","eof?()","eol?()","foorth_class()","ferr()","flush()","flush()","fwd_count()","get()","get()","has_entry?()","has_entry?()","has_exclusive?()","has_mapping?()","has_mapping?()","immediate?()","instance_base_class()","instance_base_class()","interpreter_reset()","link_exclusive_method()","link_shared_method()","map()","map()","method_missing()","mode()","name()","nest()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","object_class()","open()","peek()","peek?()","pop()","pop?()","pop_object()","popm()","prepend()","purge_method()","purge_shared_method()","push()","read()","reset_read_point()","rev_count()","set_foorth_parent()","setup()","setup()","setup()","setup()","spec()","tag()","test_a_method_added_to_object1()","test_a_method_added_to_object2()","test_a_method_inherited_into_myclass1()","test_a_method_inherited_into_myclass2()","test_a_method_inherited_into_myclass3()","test_a_method_purged_from_myclass()","test_an_instance_of_object()","test_an_instance_of_a_subclass()","test_initial_population_of_all_classes()","test_method_change_propagation()","test_some_auxilary_features()","test_that_class_is_a_class()","test_that_object_has_no_parent()","test_that_object_is_a_class()","test_that_object_is_the_parent_of_class()","test_that_a_subclass_is_created()","test_that_classes_are_named()","test_that_embed_works()","test_that_exceptions_are_easy_to_raise()","test_that_it_can_pass_args()","test_that_it_can_source_a_file()","test_that_it_can_source_a_string()","test_that_it_can_source_an_array_of_strings()","test_that_it_can_unmap()","test_that_it_can_unmap()","test_that_it_catches_bad_nesting_1()","test_that_it_catches_bad_nesting_2()","test_that_it_catches_bad_tags()","test_that_it_catches_empty_contexts()","test_that_it_catches_missing_modes()","test_that_it_catches_redefines()","test_that_it_catches_redefines()","test_that_it_creates_code()","test_that_it_handles_modes()","test_that_it_holds_data_correctly()","test_that_it_is_thread_safe()","test_that_it_matches_good_tags()","test_that_it_rejects_bad_args()","test_that_it_rejects_bad_args()","test_that_it_supports_to_foorth_n()","test_that_sym_tabs_can_add_symbols()","test_that_symbols_map_correctly()","test_that_to_foorth_b_works()","test_that_to_foorth_c_works()","to_a()","to_a()","to_foorth_b()","to_foorth_b()","to_foorth_b()","to_foorth_c()","to_foorth_c()","to_foorth_c()","to_foorth_n()","to_foorth_n()","to_foorth_n()","unmap()","unmap()","unnest()","verify_mode()","verify_tag()","vm_class()"],"longSearchIndex":["classandobjecttester","complex","contexttester","filesourcetester","helpertester","numeric","object","rational","string","stringsourcetester","symentrytester","symhierarchytester","symmaptester","xfoorth","xfoorth::context","xfoorth::filesource","xfoorth::readpoint","xfoorth::stringsource","xfoorth::symentry","xfoorth::symhierarchy","xfoorth::symmap","xfoorth::virtualmachine","xfoorth::xvirtualmachine","xfoorth::xfoorthclass","xfoorth::xfoorthobject","xfoorth::context#<<()","xfoorth::context#[]()","xfoorth::context#[]=()","xfoorth::xvirtualmachine::_create_initial_classes()","xfoorth::xfoorthclass::_create_initial_classes()","object#abort()","xfoorth::symhierarchy#add_entry()","xfoorth::symmap#add_entry()","xfoorth::xfoorthobject#add_exclusive_method()","xfoorth::xfoorthclass#add_shared_method()","xfoorth::xfoorthclass::all_classes()","xfoorth::xfoorthobject#cache_exclusive_method()","xfoorth::xfoorthobject::cache_shared_method()","xfoorth::xfoorthclass::class_class()","xfoorth::context#close()","xfoorth::xvirtualmachine#create_foorth_instance()","xfoorth::xfoorthclass#create_foorth_instance()","xfoorth::xfoorthclass#create_foorth_subclass()","xfoorth::virtualmachine#ctrl_peek()","xfoorth::virtualmachine#ctrl_pop()","xfoorth::virtualmachine#ctrl_push()","xfoorth::context#depth()","xfoorth::context#do_nest()","complex#embed()","numeric#embed()","object#embed()","rational#embed()","string#embed()","xfoorth::filesource#eof?()","xfoorth::stringsource#eof?()","xfoorth::readpoint#eol?()","xfoorth::xfoorthobject#foorth_class()","object#ferr()","xfoorth::filesource#flush()","xfoorth::stringsource#flush()","xfoorth::symmap#fwd_count()","xfoorth::filesource#get()","xfoorth::stringsource#get()","xfoorth::symhierarchy#has_entry?()","xfoorth::symmap#has_entry?()","xfoorth::xfoorthobject#has_exclusive?()","xfoorth::symhierarchy#has_mapping?()","xfoorth::symmap#has_mapping?()","xfoorth::symentry#immediate?()","xfoorth::xvirtualmachine#instance_base_class()","xfoorth::xfoorthclass#instance_base_class()","xfoorth::virtualmachine#interpreter_reset()","xfoorth::xfoorthobject#link_exclusive_method()","xfoorth::xfoorthclass#link_shared_method()","xfoorth::symhierarchy#map()","xfoorth::symmap#map()","xfoorth::xfoorthobject#method_missing()","xfoorth::context#mode()","xfoorth::xfoorthobject#name()","xfoorth::context#nest()","classandobjecttester::new()","contexttester::new()","filesourcetester::new()","helpertester::new()","stringsourcetester::new()","symentrytester::new()","symhierarchytester::new()","symmaptester::new()","xfoorth::context::new()","xfoorth::filesource::new()","xfoorth::stringsource::new()","xfoorth::symentry::new()","xfoorth::symhierarchy::new()","xfoorth::symmap::new()","xfoorth::virtualmachine::new()","xfoorth::xfoorthclass::new()","xfoorth::xfoorthclass::object_class()","xfoorth::context#open()","xfoorth::virtualmachine#peek()","xfoorth::virtualmachine#peek?()","xfoorth::virtualmachine#pop()","xfoorth::virtualmachine#pop?()","xfoorth::virtualmachine#pop_object()","xfoorth::virtualmachine#popm()","xfoorth::symhierarchy#prepend()","xfoorth::xfoorthobject::purge_method()","xfoorth::xfoorthclass#purge_shared_method()","xfoorth::virtualmachine#push()","xfoorth::readpoint#read()","xfoorth::readpoint#reset_read_point()","xfoorth::symmap#rev_count()","xfoorth::xfoorthclass#set_foorth_parent()","classandobjecttester#setup()","contexttester#setup()","symhierarchytester#setup()","symmaptester#setup()","xfoorth::symmap::spec()","xfoorth::context#tag()","classandobjecttester#test_a_method_added_to_object1()","classandobjecttester#test_a_method_added_to_object2()","classandobjecttester#test_a_method_inherited_into_myclass1()","classandobjecttester#test_a_method_inherited_into_myclass2()","classandobjecttester#test_a_method_inherited_into_myclass3()","classandobjecttester#test_a_method_purged_from_myclass()","classandobjecttester#test_an_instance_of_object()","classandobjecttester#test_an_instance_of_a_subclass()","classandobjecttester#test_initial_population_of_all_classes()","classandobjecttester#test_method_change_propagation()","contexttester#test_some_auxilary_features()","classandobjecttester#test_that_class_is_a_class()","classandobjecttester#test_that_object_has_no_parent()","classandobjecttester#test_that_object_is_a_class()","classandobjecttester#test_that_object_is_the_parent_of_class()","classandobjecttester#test_that_a_subclass_is_created()","classandobjecttester#test_that_classes_are_named()","helpertester#test_that_embed_works()","helpertester#test_that_exceptions_are_easy_to_raise()","contexttester#test_that_it_can_pass_args()","filesourcetester#test_that_it_can_source_a_file()","stringsourcetester#test_that_it_can_source_a_string()","stringsourcetester#test_that_it_can_source_an_array_of_strings()","symhierarchytester#test_that_it_can_unmap()","symmaptester#test_that_it_can_unmap()","contexttester#test_that_it_catches_bad_nesting_1()","contexttester#test_that_it_catches_bad_nesting_2()","contexttester#test_that_it_catches_bad_tags()","contexttester#test_that_it_catches_empty_contexts()","contexttester#test_that_it_catches_missing_modes()","symhierarchytester#test_that_it_catches_redefines()","symmaptester#test_that_it_catches_redefines()","contexttester#test_that_it_creates_code()","contexttester#test_that_it_handles_modes()","symentrytester#test_that_it_holds_data_correctly()","symmaptester#test_that_it_is_thread_safe()","contexttester#test_that_it_matches_good_tags()","symhierarchytester#test_that_it_rejects_bad_args()","symmaptester#test_that_it_rejects_bad_args()","helpertester#test_that_it_supports_to_foorth_n()","symhierarchytester#test_that_sym_tabs_can_add_symbols()","symmaptester#test_that_symbols_map_correctly()","helpertester#test_that_to_foorth_b_works()","helpertester#test_that_to_foorth_c_works()","xfoorth::symhierarchy#to_a()","xfoorth::symmap#to_a()","numeric#to_foorth_b()","object#to_foorth_b()","string#to_foorth_b()","numeric#to_foorth_c()","object#to_foorth_c()","string#to_foorth_c()","numeric#to_foorth_n()","object#to_foorth_n()","string#to_foorth_n()","xfoorth::symhierarchy#unmap()","xfoorth::symmap#unmap()","xfoorth::context#unnest()","xfoorth::context#verify_mode()","xfoorth::context#verify_tag()","xfoorth::xfoorthclass::vm_class()"],"info":[["ClassAndObjectTester","","ClassAndObjectTester.html","",""],["Complex","","Complex.html","","<p>Extensions to the Complex class required by the fOOth language system.\n"],["ContextTester","","ContextTester.html","",""],["FileSourceTester","","FileSourceTester.html","",""],["HelperTester","","HelperTester.html","",""],["Numeric","","Numeric.html","","<p>Extensions to the Numeric class required by the fOOth language system.\n"],["Object","","Object.html","","<p>Extensions to the Object class required by the fOOth language system.\n"],["Rational","","Rational.html","","<p>Extensions to the Rational class required by the fOOth language system.\n"],["String","","String.html","","<p>Extensions to the String class required by the fOOth language system.\n"],["StringSourceTester","","StringSourceTester.html","",""],["SymEntryTester","","SymEntryTester.html","",""],["SymHierarchyTester","","SymHierarchyTester.html","",""],["SymMapTester","","SymMapTester.html","",""],["XfOOrth","","XfOOrth.html","","<p>fOOrth_class.rb\n<p>The generic class class of the fOOrth language system.\n<p>fOOrth_context.rb\n"],["XfOOrth::Context","","XfOOrth/Context.html","","<p>The Context class is used to maintain information about the compilation\nprocess as it proceeds.\n"],["XfOOrth::FileSource","","XfOOrth/FileSource.html","","<p>The FileSource class used to extract fOOrth source code from an array of\nstrings.\n"],["XfOOrth::ReadPoint","","XfOOrth/ReadPoint.html","","<p>This mixin module is used to facilitate the reading  of source code text\nfrom a buffer.\n"],["XfOOrth::StringSource","","XfOOrth/StringSource.html","","<p>The StringSource class used to extract fOOrth source code from an array of\nstrings.\n"],["XfOOrth::SymEntry","","XfOOrth/SymEntry.html","","<p>The SymEntry class is used to hold the information associated with a\nsymbol.\n"],["XfOOrth::SymHierarchy","","XfOOrth/SymHierarchy.html","","<p>The SymHierarchy class is used to map a hierarchy of symbols to other \nsymbols that are not going to …\n"],["XfOOrth::SymMap","","XfOOrth/SymMap.html","","<p>The SymMap class is used to map symbols to other symbols that are not going\nto conflict with existing …\n"],["XfOOrth::VirtualMachine","","XfOOrth/VirtualMachine.html","","<p>The fOOrth virtual machine implementation class.\n"],["XfOOrth::XVirtualMachine","","XfOOrth/XVirtualMachine.html","","<p>A special class to contain instances of fOOrth virtual machines.\n"],["XfOOrth::XfOOrthClass","","XfOOrth/XfOOrthClass.html","","<p>The XfOOrthClass class is basis for all fOOrth classes.\n"],["XfOOrth::XfOOrthObject","","XfOOrth/XfOOrthObject.html","",""],["<<","XfOOrth::Context","XfOOrth/Context.html#method-i-3C-3C","(text)","<p>Append the text to the compile buffer.\n"],["[]","XfOOrth::Context","XfOOrth/Context.html#method-i-5B-5D","(name)","<p>Read a context variable\n"],["[]=","XfOOrth::Context","XfOOrth/Context.html#method-i-5B-5D-3D","(name, value)","<p>Set a context variable\n"],["_create_initial_classes","XfOOrth::XVirtualMachine","XfOOrth/XVirtualMachine.html#method-c-_create_initial_classes","()","<p>Create the virtual machine class in the fOOrth hierarchy. Note that this\nfunction assumes that a basic …\n"],["_create_initial_classes","XfOOrth::XfOOrthClass","XfOOrth/XfOOrthClass.html#method-c-_create_initial_classes","(clear_all=false)","<p>Create the initial classes in the fOOrth hierarchy.\n"],["abort","Object","Object.html#method-i-abort","(msg)","<p>Raise an abort exception with message.\n"],["add_entry","XfOOrth::SymHierarchy","XfOOrth/SymHierarchy.html#method-i-add_entry","(symbol, *options)","<p>Add a mapping for a string to a symbol that will not collide with existing\nsymbols.\n<p>Parameters:\n<p>symbol …\n"],["add_entry","XfOOrth::SymMap","XfOOrth/SymMap.html#method-i-add_entry","(name, *options)","<p>Add a mapping for a string to a symbol that will not collide with  existing\nsymbols.\n<p>Parameters:\n<p>name …\n"],["add_exclusive_method","XfOOrth::XfOOrthObject","XfOOrth/XfOOrthObject.html#method-i-add_exclusive_method","(symbol, &block)","<p>Add an exclusive method to this fOOrth object.\n<p>Parameters:\n<p>symbol - The method symbol to be added.\n"],["add_shared_method","XfOOrth::XfOOrthClass","XfOOrth/XfOOrthClass.html#method-i-add_shared_method","(symbol, &block)","<p>Add an instance method to this fOOrth class.\n<p>Parameters:\n<p>symbol - The method symbol to be added.\n"],["all_classes","XfOOrth::XfOOrthClass","XfOOrth/XfOOrthClass.html#method-c-all_classes","()","<p>Get the class tree.\n"],["cache_exclusive_method","XfOOrth::XfOOrthObject","XfOOrth/XfOOrthObject.html#method-i-cache_exclusive_method","(symbol, &block)","<p>Cache the specified code block by adding it as a singleton method. Thus\nthis method is only available …\n"],["cache_shared_method","XfOOrth::XfOOrthObject","XfOOrth/XfOOrthObject.html#method-c-cache_shared_method","(symbol, &block)","<p>Cache the specified code block by adding it as a method on the  receiver’s\nclass. Thus this method is …\n"],["class_class","XfOOrth::XfOOrthClass","XfOOrth/XfOOrthClass.html#method-c-class_class","()","<p>Get the class class.\n"],["close","XfOOrth::Context","XfOOrth/Context.html#method-i-close","(tags)","<p>Extract the executable code block from the intermediate source code and\nclose off the context.\n<p>Parameters: …\n"],["create_fOOrth_instance","XfOOrth::XVirtualMachine","XfOOrth/XVirtualMachine.html#method-i-create_fOOrth_instance","(_vm)","<p>Create an instance of a virtual machine.\n<p>Parameters:\n<p>_vm - Ignored because the receiver IS a virtual machine. …\n"],["create_fOOrth_instance","XfOOrth::XfOOrthClass","XfOOrth/XfOOrthClass.html#method-i-create_fOOrth_instance","(vm)","<p>Create an instance of this fOOrth class.\n<p>Parameters:\n<p>vm - The current fOOrth virtual machine.\n"],["create_fOOrth_subclass","XfOOrth::XfOOrthClass","XfOOrth/XfOOrthClass.html#method-i-create_fOOrth_subclass","(vm, name, class_base=XfOOrthClass, &block)","<p>Create a new fOOrth subclass of this class.\n<p>Parameters:\n<p>vm - The current fOOrth virtual machine.\n"],["ctrl_peek","XfOOrth::VirtualMachine","XfOOrth/VirtualMachine.html#method-i-ctrl_peek","(depth=1)","<p>Read an entry from the control stack without modify that stack.\n<p>Parameters:\n<p>depth - The (optional) entry …\n"],["ctrl_pop","XfOOrth::VirtualMachine","XfOOrth/VirtualMachine.html#method-i-ctrl_pop","()","<p>Remove the “top” entry from the control stack.\n<p>Returns:\n<p>The “top” element of the control …\n"],["ctrl_push","XfOOrth::VirtualMachine","XfOOrth/VirtualMachine.html#method-i-ctrl_push","(value)","<p>Add an entry to the control stack.\n"],["depth","XfOOrth::Context","XfOOrth/Context.html#method-i-depth","()","<p>How deeply nested are we here?\n"],["do_nest","XfOOrth::Context","XfOOrth/Context.html#method-i-do_nest","(tag, o)","<p>The worker bee for nest.\n"],["embed","Complex","Complex.html#method-i-embed","()","<p>Convert this complex number to a form suitable for embedding in a source\nstring.\n<p>Returns\n<p>An embeddable …\n"],["embed","Numeric","Numeric.html#method-i-embed","()","<p>Convert this number to a form suitable for embedding in a source string.\n<p>Returns\n<p>An embeddable form of …\n"],["embed","Object","Object.html#method-i-embed","()","<p>Raise a fOOrth language internal exception as this operation is not\nallowed.\n"],["embed","Rational","Rational.html#method-i-embed","()","<p>Convert this rational number to a form suitable for embedding in a source\nstring.\n<p>Returns\n<p>An embeddable …\n"],["embed","String","String.html#method-i-embed","()","<p>Convert this String to a form suitable for embedding in a source string.\n<p>Returns\n<p>An embeddable form of …\n"],["eof?","XfOOrth::FileSource","XfOOrth/FileSource.html#method-i-eof-3F","()","<p>Has the source reached the end of the available data?\n<p>Returns:\n<p>True if the end is reached else false.\n"],["eof?","XfOOrth::StringSource","XfOOrth/StringSource.html#method-i-eof-3F","()","<p>Has the source reached the end of the available data?\n<p>Returns:\n<p>True if the end is reached else false.\n"],["eol?","XfOOrth::ReadPoint","XfOOrth/ReadPoint.html#method-i-eol-3F","()","<p>Is the read point at the end of line?\n"],["fOOrth_class","XfOOrth::XfOOrthObject","XfOOrth/XfOOrthObject.html#method-i-fOOrth_class","()","<p>An instance method to get the fOOrth_class that this object belongs to.\n"],["ferr","Object","Object.html#method-i-ferr","(msg)","<p>Fail with XfOOrthError argument error.\n"],["flush","XfOOrth::FileSource","XfOOrth/FileSource.html#method-i-flush","()","<p>Skip over all remaining data in the buffers.\n"],["flush","XfOOrth::StringSource","XfOOrth/StringSource.html#method-i-flush","()","<p>Skip over all remaining data in the buffers.\n"],["fwd_count","XfOOrth::SymMap","XfOOrth/SymMap.html#method-i-fwd_count","()","<p>How many entries are in the forward map? Used for testing only.\n"],["get","XfOOrth::FileSource","XfOOrth/FileSource.html#method-i-get","()","<p>Get the next character of input data\n<p>Returns:\n<p>The next character or nil if none are available.\n"],["get","XfOOrth::StringSource","XfOOrth/StringSource.html#method-i-get","()","<p>Get the next character of input data\n<p>Returns:\n<p>The next character or nil if none are available.\n"],["has_entry?","XfOOrth::SymHierarchy","XfOOrth/SymHierarchy.html#method-i-has_entry-3F","(name)",""],["has_entry?","XfOOrth::SymMap","XfOOrth/SymMap.html#method-i-has_entry-3F","(name)",""],["has_exclusive?","XfOOrth::XfOOrthObject","XfOOrth/XfOOrthObject.html#method-i-has_exclusive-3F","()","<p>Does this object have exclusive methods defined on it?\n"],["has_mapping?","XfOOrth::SymHierarchy","XfOOrth/SymHierarchy.html#method-i-has_mapping-3F","(mapped)",""],["has_mapping?","XfOOrth::SymMap","XfOOrth/SymMap.html#method-i-has_mapping-3F","(mapped)",""],["immediate?","XfOOrth::SymEntry","XfOOrth/SymEntry.html#method-i-immediate-3F","()","<p>Is this an immediate symbol?\n"],["instance_base_class","XfOOrth::XVirtualMachine","XfOOrth/XVirtualMachine.html#method-i-instance_base_class","()","<p>The base Ruby class for instances of this class.\n"],["instance_base_class","XfOOrth::XfOOrthClass","XfOOrth/XfOOrthClass.html#method-i-instance_base_class","()","<p>The base Ruby class for instances of this class.\n"],["interpreter_reset","XfOOrth::VirtualMachine","XfOOrth/VirtualMachine.html#method-i-interpreter_reset","()","<p>Reset the state of the fOOrth inner interpreter.\n"],["link_exclusive_method","XfOOrth::XfOOrthObject","XfOOrth/XfOOrthObject.html#method-i-link_exclusive_method","(name)","<p>Search the exclusive dictionary for the named method and add it to the\ntarget class.\n<p>Parameters:\n<p>name …\n"],["link_shared_method","XfOOrth::XfOOrthClass","XfOOrth/XfOOrthClass.html#method-i-link_shared_method","(name, target_class)","<p>Search the object class dictionaries for the named instance method and add\nit to the target class.\n<p>Parameters: …\n"],["map","XfOOrth::SymHierarchy","XfOOrth/SymHierarchy.html#method-i-map","(name)","<p>Get the entry for the mapping string. Return nil if there is no entry.\n<p>Parameters:\n<p>name - The string to …\n"],["map","XfOOrth::SymMap","XfOOrth/SymMap.html#method-i-map","(name)","<p>Get the entry for the mapping string. Return nil if there is no entry.\n<p>Parameters:\n<p>name - The string to …\n"],["method_missing","XfOOrth::XfOOrthObject","XfOOrth/XfOOrthObject.html#method-i-method_missing","(name, *args, &block)","<p>The method_missing hook is at the very heart of the fOOrth language\ncompiler. It is here that code blocks …\n"],["mode","XfOOrth::Context","XfOOrth/Context.html#method-i-mode","()","<p>Get the current mode.\n"],["name","XfOOrth::XfOOrthObject","XfOOrth/XfOOrthObject.html#method-i-name","()","<p>Get the name of this object.\n"],["nest","XfOOrth::Context","XfOOrth/Context.html#method-i-nest","(tag, *options)","<p>Nest a context within another or open a new context if needed.\n<p>Parameters:\n<p>tag - The token associated with …\n"],["new","ClassAndObjectTester","ClassAndObjectTester.html#method-c-new","(*all)","<p>Special initialize to track rake progress.\n"],["new","ContextTester","ContextTester.html#method-c-new","(*all)","<p>Special initialize to track rake progress.\n"],["new","FileSourceTester","FileSourceTester.html#method-c-new","(*all)","<p>Special initialize to track rake progress.\n"],["new","HelperTester","HelperTester.html#method-c-new","(*all)","<p>Special initialize to track rake progress.\n"],["new","StringSourceTester","StringSourceTester.html#method-c-new","(*all)","<p>Special initialize to track rake progress.\n"],["new","SymEntryTester","SymEntryTester.html#method-c-new","(*all)","<p>Special initialize to track rake progress.\n"],["new","SymHierarchyTester","SymHierarchyTester.html#method-c-new","(*all)","<p>Special initialize to track rake progress.\n"],["new","SymMapTester","SymMapTester.html#method-c-new","(*all)","<p>Special initialize to track rake progress.\n"],["new","XfOOrth::Context","XfOOrth/Context.html#method-c-new","()","<p>Create a new compiler context object.\n"],["new","XfOOrth::FileSource","XfOOrth/FileSource.html#method-c-new","(file_name)","<p>Initialize from an array of strings.\n<p>Parameters:\n<p>file_name - The name of the file to open.\n"],["new","XfOOrth::StringSource","XfOOrth/StringSource.html#method-c-new","(string_list)","<p>Initialize from an array of strings.\n<p>Parameters:\n<p>string_list - An array of strings.\n"],["new","XfOOrth::SymEntry","XfOOrth/SymEntry.html#method-c-new","(name, symbol, type, immediate, &block)","<p>Set up the Symbol Entry.\n"],["new","XfOOrth::SymHierarchy","XfOOrth/SymHierarchy.html#method-c-new","(previous)","<p>Build a new hierarchy for symbols built on the previous hierarchy or base\nsymbol mapping.\n<p>Parameters\n<p>previous …\n"],["new","XfOOrth::SymMap","XfOOrth/SymMap.html#method-c-new","()","<p>Create a new SymMap object.\n"],["new","XfOOrth::VirtualMachine","XfOOrth/VirtualMachine.html#method-c-new","()","<p>Initialize the state of the fOOrth inner interpreter.\n"],["new","XfOOrth::XfOOrthClass","XfOOrth/XfOOrthClass.html#method-c-new","(name, fOOrth_parent)","<p>Create an new instance of a fOOrth class.\n<p>Parameters:\n<p>name - The name of this fOOrth class.\n"],["object_class","XfOOrth::XfOOrthClass","XfOOrth/XfOOrthClass.html#method-c-object_class","()","<p>Get the object class.\n"],["open","XfOOrth::Context","XfOOrth/Context.html#method-i-open","(tag, *options)","<p>Open up a compiling context.\n<p>Parameters:\n<p>tag - The token associated with this compilation. This is usually …\n"],["peek","XfOOrth::VirtualMachine","XfOOrth/VirtualMachine.html#method-i-peek","(depth=1)","<p>Read an entry from the data stack without modify that stack.\n<p>Parameters:\n<p>depth - The (optional) entry to …\n"],["peek?","XfOOrth::VirtualMachine","XfOOrth/VirtualMachine.html#method-i-peek-3F","(depth=1)","<p>Read an entry from the data stack as a boolean without modify that stack.\n<p>Parameters:\n<p>depth - The (optional) …\n"],["pop","XfOOrth::VirtualMachine","XfOOrth/VirtualMachine.html#method-i-pop","()","<p>Get the “top” entry from the data stack.\n<p>Note:\n<p>If the stack is empty this will raise a XfOOrthError …\n"],["pop?","XfOOrth::VirtualMachine","XfOOrth/VirtualMachine.html#method-i-pop-3F","()","<p>Remove the “top” entry from the data stack as a boolean.\n<p>Returns:\n<p>The “top” element …\n"],["pop_object","XfOOrth::VirtualMachine","XfOOrth/VirtualMachine.html#method-i-pop_object","()","<p>Pop a fOOrth object from the data stack. This object must be a kind of\nXfOOrthObject or one of its subclasses. …\n"],["popm","XfOOrth::VirtualMachine","XfOOrth/VirtualMachine.html#method-i-popm","(count)","<p>Remove multiple entries from the “top” of the data stack.\n<p>Returns:\n<p>An array containing the “top” …\n"],["prepend","XfOOrth::SymHierarchy","XfOOrth/SymHierarchy.html#method-i-prepend","(entry=SymMap.new)","<p>Insert an entry to the hierarchy at the first slot.\n<p>Parameters\n<p>entry - the entry to be inserted. This defaults …\n"],["purge_method","XfOOrth::XfOOrthObject","XfOOrth/XfOOrthObject.html#method-c-purge_method","(symbol)","<p>Remove the specified method from this class. The method is still accessible\nif defined in a super class …\n"],["purge_shared_method","XfOOrth::XfOOrthClass","XfOOrth/XfOOrthClass.html#method-i-purge_shared_method","(symbol)","<p>Purge the instance method cache for the specified symbol.\n"],["push","XfOOrth::VirtualMachine","XfOOrth/VirtualMachine.html#method-i-push","(value)","<p>Add an entry onto the data stack.\n"],["read","XfOOrth::ReadPoint","XfOOrth/ReadPoint.html#method-i-read","(&block)","<p>Read the next character of data from the source. If there is nothing to\nread, call the block to get some …\n"],["reset_read_point","XfOOrth::ReadPoint","XfOOrth/ReadPoint.html#method-i-reset_read_point","()","<p>Reset the read point to the initial conditions. Namely, no text in the\nbuffer and not at end of line, …\n"],["rev_count","XfOOrth::SymMap","XfOOrth/SymMap.html#method-i-rev_count","()","<p>How many entries are in the reverse map? Used for testing only.\n"],["set_fOOrth_parent","XfOOrth::XfOOrthClass","XfOOrth/XfOOrthClass.html#method-i-set_fOOrth_parent","(fOOrth_parent)","<p>Set the class’s parent class for the case where this can not be done when\nthe class is constructed.  …\n"],["setup","ClassAndObjectTester","ClassAndObjectTester.html#method-i-setup","()","<p>Create the initial conditions.\n"],["setup","ContextTester","ContextTester.html#method-i-setup","()","<p>Common setup tasks\n"],["setup","SymHierarchyTester","SymHierarchyTester.html#method-i-setup","()","<p>Common setup tasks\n"],["setup","SymMapTester","SymMapTester.html#method-i-setup","()","<p>Common set up tasks\n"],["spec","XfOOrth::SymMap","XfOOrth/SymMap.html#method-c-spec","()","<p>This method returns the OptionList variable that details the parameters \nused for a symbol mapping.  …\n"],["tag","XfOOrth::Context","XfOOrth/Context.html#method-i-tag","()","<p>Get the active tag.\n"],["test_a_method_added_to_Object1","ClassAndObjectTester","ClassAndObjectTester.html#method-i-test_a_method_added_to_Object1","()","<p>Verify a method added to Object (part 1/2)\n"],["test_a_method_added_to_Object2","ClassAndObjectTester","ClassAndObjectTester.html#method-i-test_a_method_added_to_Object2","()","<p>Verify a method added to Object (part 2/2)\n"],["test_a_method_inherited_into_MyClass1","ClassAndObjectTester","ClassAndObjectTester.html#method-i-test_a_method_inherited_into_MyClass1","()","<p>Verify a method inherited by a subclass (part 1/3)\n"],["test_a_method_inherited_into_MyClass2","ClassAndObjectTester","ClassAndObjectTester.html#method-i-test_a_method_inherited_into_MyClass2","()","<p>Verify a method inherited by a subclass (part 2/3)\n"],["test_a_method_inherited_into_MyClass3","ClassAndObjectTester","ClassAndObjectTester.html#method-i-test_a_method_inherited_into_MyClass3","()","<p>Verify a method inherited by a subclass (part 3/3)\n"],["test_a_method_purged_from_MyClass","ClassAndObjectTester","ClassAndObjectTester.html#method-i-test_a_method_purged_from_MyClass","()","<p>Verify a method added to Object and purged from MyClass\n"],["test_an_instance_of_Object","ClassAndObjectTester","ClassAndObjectTester.html#method-i-test_an_instance_of_Object","()","<p>Verify an instance of Object\n"],["test_an_instance_of_a_subclass","ClassAndObjectTester","ClassAndObjectTester.html#method-i-test_an_instance_of_a_subclass","()","<p>Verify an instance of MyClass\n"],["test_initial_population_of_all_classes","ClassAndObjectTester","ClassAndObjectTester.html#method-i-test_initial_population_of_all_classes","()","<p>Test initial conditions created when classes are first created.\n"],["test_method_change_propagation","ClassAndObjectTester","ClassAndObjectTester.html#method-i-test_method_change_propagation","()","<p>Verify method change propagation.\n"],["test_some_auxilary_features","ContextTester","ContextTester.html#method-i-test_some_auxilary_features","()","<p>Test depth and info\n"],["test_that_Class_is_a_class","ClassAndObjectTester","ClassAndObjectTester.html#method-i-test_that_Class_is_a_class","()","<p>Verify that class Class is a Class.\n"],["test_that_Object_has_no_parent","ClassAndObjectTester","ClassAndObjectTester.html#method-i-test_that_Object_has_no_parent","()","<p>Verify that the Object has no parent.\n"],["test_that_Object_is_a_class","ClassAndObjectTester","ClassAndObjectTester.html#method-i-test_that_Object_is_a_class","()","<p>Verify that class Object is a Class.\n"],["test_that_Object_is_the_parent_of_Class","ClassAndObjectTester","ClassAndObjectTester.html#method-i-test_that_Object_is_the_parent_of_Class","()","<p>Verify that the parent of Class is Object.\n"],["test_that_a_subclass_is_created","ClassAndObjectTester","ClassAndObjectTester.html#method-i-test_that_a_subclass_is_created","()","<p>Verify a subclass of Object\n"],["test_that_classes_are_named","ClassAndObjectTester","ClassAndObjectTester.html#method-i-test_that_classes_are_named","()","<p>Verify class names.\n"],["test_that_embed_works","HelperTester","HelperTester.html#method-i-test_that_embed_works","()","<p>Test the ways that values are embedded in code as literals.\n"],["test_that_exceptions_are_easy_to_raise","HelperTester","HelperTester.html#method-i-test_that_exceptions_are_easy_to_raise","()","<p>Test the quick fail raise in fOOrth.\n"],["test_that_it_can_pass_args","ContextTester","ContextTester.html#method-i-test_that_it_can_pass_args","()","<p>Test passing args to the created block.\n"],["test_that_it_can_source_a_file","FileSourceTester","FileSourceTester.html#method-i-test_that_it_can_source_a_file","()","<p>Test FileSource with a file.\n"],["test_that_it_can_source_a_string","StringSourceTester","StringSourceTester.html#method-i-test_that_it_can_source_a_string","()","<p>Test StringSource with a simple string.\n"],["test_that_it_can_source_an_array_of_strings","StringSourceTester","StringSourceTester.html#method-i-test_that_it_can_source_an_array_of_strings","()","<p>Test StringSource with an array of strings.\n"],["test_that_it_can_unmap","SymHierarchyTester","SymHierarchyTester.html#method-i-test_that_it_can_unmap","()","<p>Verify reverse mapping.\n"],["test_that_it_can_unmap","SymMapTester","SymMapTester.html#method-i-test_that_it_can_unmap","()","<p>Verify reverse mapping.\n"],["test_that_it_catches_bad_nesting_1","ContextTester","ContextTester.html#method-i-test_that_it_catches_bad_nesting_1","()","<p>An open may not follow an open.\n"],["test_that_it_catches_bad_nesting_2","ContextTester","ContextTester.html#method-i-test_that_it_catches_bad_nesting_2","()","<p>An open may not follow a nest.\n"],["test_that_it_catches_bad_tags","ContextTester","ContextTester.html#method-i-test_that_it_catches_bad_tags","()","<p>Test that it detects mismatched tags.\n"],["test_that_it_catches_empty_contexts","ContextTester","ContextTester.html#method-i-test_that_it_catches_empty_contexts","()","<p>An open is required before verify, close, or unnest.\n"],["test_that_it_catches_missing_modes","ContextTester","ContextTester.html#method-i-test_that_it_catches_missing_modes","()","<p>Testing out improvements to option list 1.1.0\n"],["test_that_it_catches_redefines","SymHierarchyTester","SymHierarchyTester.html#method-i-test_that_it_catches_redefines","()","<p>Check for a symbol redefine error.\n"],["test_that_it_catches_redefines","SymMapTester","SymMapTester.html#method-i-test_that_it_catches_redefines","()","<p>Check for a symbol redefine error.\n"],["test_that_it_creates_code","ContextTester","ContextTester.html#method-i-test_that_it_creates_code","()","<p>Test that it creates working lambda blocks.\n"],["test_that_it_handles_modes","ContextTester","ContextTester.html#method-i-test_that_it_handles_modes","()","<p>Test mode tracking in the context.\n"],["test_that_it_holds_data_correctly","SymEntryTester","SymEntryTester.html#method-i-test_that_it_holds_data_correctly","()","<p>A very simple test of a very simple class.\n"],["test_that_it_is_thread_safe","SymMapTester","SymMapTester.html#method-i-test_that_it_is_thread_safe","()","<p>A test for multiple threads creating symbols.\n"],["test_that_it_matches_good_tags","ContextTester","ContextTester.html#method-i-test_that_it_matches_good_tags","()","<p>Test that it indicates the correct tag on verify.\n"],["test_that_it_rejects_bad_args","SymHierarchyTester","SymHierarchyTester.html#method-i-test_that_it_rejects_bad_args","()","<p>Check for bad option arguments.\n"],["test_that_it_rejects_bad_args","SymMapTester","SymMapTester.html#method-i-test_that_it_rejects_bad_args","()","<p>Check for bad option arguments.\n"],["test_that_it_supports_to_fOOrth_n","HelperTester","HelperTester.html#method-i-test_that_it_supports_to_fOOrth_n","()","<p>Test support for the to_fOOrth_n method\n"],["test_that_sym_tabs_can_add_symbols","SymHierarchyTester","SymHierarchyTester.html#method-i-test_that_sym_tabs_can_add_symbols","()","<p>Are symbols added?\n"],["test_that_symbols_map_correctly","SymMapTester","SymMapTester.html#method-i-test_that_symbols_map_correctly","()","<p>Verify mapping and aliasing\n"],["test_that_to_fOOrth_b_works","HelperTester","HelperTester.html#method-i-test_that_to_fOOrth_b_works","()","<p>Test all the ways to determine a fOOrth boolean.\n"],["test_that_to_fOOrth_c_works","HelperTester","HelperTester.html#method-i-test_that_to_fOOrth_c_works","()","<p>Test all the ways to extract a single fOOrth character.\n"],["to_a","XfOOrth::SymHierarchy","XfOOrth/SymHierarchy.html#method-i-to_a","()","<p>Return this symbol hierarchy as an array of maps.\n"],["to_a","XfOOrth::SymMap","XfOOrth/SymMap.html#method-i-to_a","()","<p>Return this symbol map in an array. This is used to allow a single symbol\nmap to be used as the basis …\n"],["to_fOOrth_b","Numeric","Numeric.html#method-i-to_fOOrth_b","()","<p>Convert this number to a fOOrth boolean.\n"],["to_fOOrth_b","Object","Object.html#method-i-to_fOOrth_b","()","<p>Convert this object to a fOOrth boolean.\n"],["to_fOOrth_b","String","String.html#method-i-to_fOOrth_b","()","<p>Convert this string to a fOOrth boolean.\n"],["to_fOOrth_c","Numeric","Numeric.html#method-i-to_fOOrth_c","()","<p>Convert this number to a single character string.\n"],["to_fOOrth_c","Object","Object.html#method-i-to_fOOrth_c","()","<p>Convert this object to a single character string.\n"],["to_fOOrth_c","String","String.html#method-i-to_fOOrth_c","()","<p>Convert this string to a single character string.\n"],["to_fOOrth_n","Numeric","Numeric.html#method-i-to_fOOrth_n","()","<p>Convert this numeric to a numeric. Return self.\n"],["to_fOOrth_n","Object","Object.html#method-i-to_fOOrth_n","()","<p>Convert this object to a numeric. Returns nil for fail.\n"],["to_fOOrth_n","String","String.html#method-i-to_fOOrth_n","()","<p>Convert this string to a numeric. Return a number or nil on fail.\n"],["unmap","XfOOrth::SymHierarchy","XfOOrth/SymHierarchy.html#method-i-unmap","(mapped)","<p>Get the entry for the mapping symbol. Return nil if there is no entry.\n<p>Parameters:\n<p>mapped - The mapping …\n"],["unmap","XfOOrth::SymMap","XfOOrth/SymMap.html#method-i-unmap","(mapped)","<p>Get the entry for the mapping symbol. Return nil if there is no entry.\n<p>Parameters:\n<p>mapped - The mapping …\n"],["unnest","XfOOrth::Context","XfOOrth/Context.html#method-i-unnest","(tags)","<p>Un-nest a context. If this was the opening context, return the block, else\nreturn nil.\n<p>Parameters:\n<p>tags …\n"],["verify_mode","XfOOrth::Context","XfOOrth/Context.html#method-i-verify_mode","(modes)","<p>Verify that the mode of this context is one of the modes listed.\n<p>Parameters:\n<p>modes - An array of allowed …\n"],["verify_tag","XfOOrth::Context","XfOOrth/Context.html#method-i-verify_tag","(tags)","<p>Verify that the tag of this context is one of the tags listed.\n<p>Parameters:\n<p>tags - An array of allowed tag …\n"],["vm_class","XfOOrth::XfOOrthClass","XfOOrth/XfOOrthClass.html#method-c-vm_class","()","<p>Get the virtual machine class.\n"]]}}